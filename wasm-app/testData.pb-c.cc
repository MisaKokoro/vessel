/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: testData.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "testData.pb-c.h"
void   person__init
                     (Person         *message)
{
  static const Person init_value = PERSON__INIT;
  *message = init_value;
}
size_t person__get_packed_size
                     (const Person *message)
{
  assert(message->base.descriptor == &person__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t person__pack
                     (const Person *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &person__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t person__pack_to_buffer
                     (const Person *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &person__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Person *
       person__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Person *)
     protobuf_c_message_unpack (&person__descriptor,
                                allocator, len, data);
}
void   person__free_unpacked
                     (Person *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &person__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   array__init
                     (Array         *message)
{
  static const Array init_value = ARRAY__INIT;
  *message = init_value;
}
size_t array__get_packed_size
                     (const Array *message)
{
  assert(message->base.descriptor == &array__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t array__pack
                     (const Array *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &array__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t array__pack_to_buffer
                     (const Array *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &array__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Array *
       array__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Array *)
     protobuf_c_message_unpack (&array__descriptor,
                                allocator, len, data);
}
void   array__free_unpacked
                     (Array *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &array__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   array_double__init
                     (ArrayDouble         *message)
{
  static const ArrayDouble init_value = ARRAY_DOUBLE__INIT;
  *message = init_value;
}
size_t array_double__get_packed_size
                     (const ArrayDouble *message)
{
  assert(message->base.descriptor == &array_double__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t array_double__pack
                     (const ArrayDouble *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &array_double__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t array_double__pack_to_buffer
                     (const ArrayDouble *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &array_double__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ArrayDouble *
       array_double__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ArrayDouble *)
     protobuf_c_message_unpack (&array_double__descriptor,
                                allocator, len, data);
}
void   array_double__free_unpacked
                     (ArrayDouble *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &array_double__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   person__info__init
                     (PersonInfo         *message)
{
  static const PersonInfo init_value = PERSON__INFO__INIT;
  *message = init_value;
}
size_t person__info__get_packed_size
                     (const PersonInfo *message)
{
  assert(message->base.descriptor == &person__info__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t person__info__pack
                     (const PersonInfo *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &person__info__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t person__info__pack_to_buffer
                     (const PersonInfo *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &person__info__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
PersonInfo *
       person__info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (PersonInfo *)
     protobuf_c_message_unpack (&person__info__descriptor,
                                allocator, len, data);
}
void   person__info__free_unpacked
                     (PersonInfo *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &person__info__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
static const ProtobufCFieldDescriptor person__field_descriptors[1] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(Person, name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned person__field_indices_by_name[] = {
  0,   /* field[0] = name */
};
static const ProtobufCIntRange person__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor person__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "Person",
  "Person",
  "Person",
  "",
  sizeof(Person),
  1,
  person__field_descriptors,
  person__field_indices_by_name,
  1,  person__number_ranges,
  (ProtobufCMessageInit) person__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor array__field_descriptors[1] =
{
  {
    "arr",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_INT32,
    offsetof(Array, n_arr),
    offsetof(Array, arr),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned array__field_indices_by_name[] = {
  0,   /* field[0] = arr */
};
static const ProtobufCIntRange array__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor array__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "Array",
  "Array",
  "Array",
  "",
  sizeof(Array),
  1,
  array__field_descriptors,
  array__field_indices_by_name,
  1,  array__number_ranges,
  (ProtobufCMessageInit) array__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor array_double__field_descriptors[1] =
{
  {
    "arr",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_DOUBLE,
    offsetof(ArrayDouble, n_arr),
    offsetof(ArrayDouble, arr),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned array_double__field_indices_by_name[] = {
  0,   /* field[0] = arr */
};
static const ProtobufCIntRange array_double__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor array_double__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ArrayDouble",
  "ArrayDouble",
  "ArrayDouble",
  "",
  sizeof(ArrayDouble),
  1,
  array_double__field_descriptors,
  array_double__field_indices_by_name,
  1,  array_double__number_ranges,
  (ProtobufCMessageInit) array_double__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor person__info__field_descriptors[4] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(PersonInfo, name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "age",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(PersonInfo, age),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "height",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_DOUBLE,
    0,   /* quantifier_offset */
    offsetof(PersonInfo, height),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "weight",
    4,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_DOUBLE,
    0,   /* quantifier_offset */
    offsetof(PersonInfo, weight),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned person__info__field_indices_by_name[] = {
  1,   /* field[1] = age */
  2,   /* field[2] = height */
  0,   /* field[0] = name */
  3,   /* field[3] = weight */
};
static const ProtobufCIntRange person__info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor person__info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "Person_Info",
  "PersonInfo",
  "PersonInfo",
  "",
  sizeof(PersonInfo),
  4,
  person__info__field_descriptors,
  person__info__field_indices_by_name,
  1,  person__info__number_ranges,
  (ProtobufCMessageInit) person__info__init,
  NULL,NULL,NULL    /* reserved[123] */
};
