
/*
 * Copyright (C) 2019 Intel Corporation.  All rights reserved.
 * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
 */
#include "wasm_export.h"
#include "bh_getopt.h"
#include "bh_read_file.h"
#include "test.h"
#include "wasm_c_api.h"
#include "platform_api_vmcore.h"
#include <iostream>

#include <time.h>
#include <sys/time.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdint.h> 
#include <vector>
#include <string>
using namespace std;
template<typename T>
void copy_vector(vector<T> vec,void *p){
    uint32_t n=vec.size();
    *((uint32_t*)p)=12;
    *((uint32_t*)p+1)=12+sizeof(T)*n;
    *((uint32_t*)p+2)=12+sizeof(T)*n;
    uint32_t* st=(uint32_t*)p+3;
    T* start=(T*)(st);
    for(int i=0;i<n;i++){
        *(start+i)=vec[i];
    }
}

void copy_string(string s,void *p){
    uint32_t n=s.size();
    if(n<=10){////////////////////////////////////////本地存储[10B char数据][1B全0][1B长度]
        for(uint32_t i=0;i<n;i++)
            *((char*)p+i)=s[i];
        *((uint8_t*)p+11)=n;//长度
    }
    else{/////////////////////////////////////////////异地存储[4B char指针][4B size][?]
        char*data=(char*)p+12;
        for(uint32_t i=0;i<n;i++)
            *((char*)p+i)=s[i];
        *(char**)p=data;
        *((uint32_t*)p+1)=n;
        *((uint32_t*)p+2)=128;//标志位为1   cout<<*((char*)(&s)+11)-'('<<endl;
    }
}
typedef struct Person {
    int age;
    long long phonenum;
    char* name;
    int high;
}Person;
typedef struct ListString {
    char *str[10];
} ListString;

static char global_heap_buf[4096 * 1024];
char *buffer, error_buf[128];
// const char *wasm_path = NULL, *wasi_dir = NULL;
char *wasm_path = "/home/yanxiang/Desktop/wasmX/build/wasm-app/testapp.wasm";

void *P;
bool is_extern_mem = true;

wasm_module_t module = NULL;
wasm_module_inst_t module_inst = NULL;
wasm_exec_env_t exec_env = NULL;
uint32_t buf_size, stack_size = 4096, heap_size = 8192;
uint32_t wasm_buffer = 0;
wasm_function_inst_t printPersonInfo;

RuntimeInitArgs init_args;
uint32_t res = 4 * BH_KB;

void InitMemory() {
    uint64 map_size = 8 * (uint64)BH_GB;
    size_t total_size = 2147549184;

    P = wasm_runtime_create_memory(total_size);

    
    void *native_ptr = P + res;
    char *str = (char*)native_ptr;
    for (int i = 0; i < 10; i++) {
        str[i] = i == 9 ? '\0' : i + 'a';
    }
    printf("Res = %x\n",res);
}
void initWasmEnv() {
    memset(&init_args, 0, sizeof(RuntimeInitArgs));
    InitMemory();

    init_args.mem_alloc_type = Alloc_With_Pool;
    init_args.mem_alloc_option.pool.heap_buf = global_heap_buf;
    init_args.mem_alloc_option.pool.heap_size = sizeof(global_heap_buf);

    if (!wasm_runtime_full_init(&init_args)) {
        printf("Init runtime environment failed.\n");
        deleteWasmEnv();
    }

    buffer = bh_read_file_to_buffer(wasm_path, &buf_size);

    if (!buffer) {
        printf("Open wasm app file [%s] failed.\n", wasm_path);
        deleteWasmEnv();
    }

    module = wasm_runtime_load((uint8_t*)buffer, buf_size, error_buf, sizeof(error_buf));
    if (!module) {
        printf("Load wasm module failed. error: %s\n", error_buf);
        deleteWasmEnv();
    }

    module_inst = wasm_runtime_instantiate(module, stack_size, heap_size,
                                           error_buf, sizeof(error_buf));

    if (!module_inst) {
        printf("Instantiate wasm module failed. error: %s\n", error_buf);
        deleteWasmEnv();
    }

    exec_env = wasm_runtime_create_exec_env(module_inst, stack_size);
    if (!exec_env) {
        printf("Create wasm execution environment failed.\n");
        deleteWasmEnv();
    }
}

void deleteWasmEnv() {
    if (exec_env)
        wasm_runtime_destroy_exec_env(exec_env);
    if (module_inst) {
        if (wasm_buffer)
            wasm_runtime_module_free(module_inst, wasm_buffer);
        wasm_runtime_deinstantiate(module_inst);
    }
    if (module)
        wasm_runtime_unload(module);
    if (buffer)
        BH_FREE(buffer);
    wasm_runtime_destroy();
}

uint32_t BuildListString() {
    void *native_ptr;
    uint32_t res = wasm_runtime_module_malloc(module_inst,1024,&native_ptr);
    

    // wasm_runtime_malloc()

    void *cur = native_ptr + sizeof (uint32_t) * 10;
    uint32_t offset = res + sizeof(uint32_t) * 10;
    for (int i = 0; i < 10; i++) {
        int size = sprintf((char*)cur,"str%d is %d",i,i * 10 + 1) + 1;
        // printf("cur = %s\n",(char*)cur);
        cur += size;
        *((uint32_t*)native_ptr + i) = offset;
        offset += size;
    }

    return res;
}

uint32_t BuildVector() {
    void *native_ptr;
    uint32_t res = wasm_runtime_module_malloc(module_inst,1024,&native_ptr);
    // uint32_t res = 1 * (BH_GB);
    // native_ptr = wasm_runtime_addr_app_to_native(module_inst,res);

    int size = 10;
    int vec_size = 12;
    *((uint32_t*)native_ptr + 0) = res + vec_size; // vec start Pointer
    *((uint32_t*)native_ptr + 1) = res + vec_size + size * sizeof (int); //vec end Pointer
    *((uint32_t*)native_ptr + 2) = res + vec_size + size * sizeof (int); //vec finish Pointer

    int *data = (int*)(native_ptr + vec_size);
    for (int i = 0; i < size; i++) {
        *data = i;
        data++;
    }
    printf("Res = %x\n",res);
    return res;
}

uint32_t BuildString() {
    void *native_ptr;
    uint32_t res = wasm_runtime_module_malloc(module_inst,1024,&native_ptr);
    // uint32_t res = 1 * (BH_GB);
    // native_ptr = wasm_runtime_addr_app_to_native(module_inst,res);

    int size = 10;
    int string_size = 12;
    int cap = 20;
    *((uint32_t*)native_ptr + 0) = 20; // string start Pointer
    *((uint32_t*)native_ptr + 1) = size; //string size
    *((uint32_t*)native_ptr + 2) = res + string_size; //string cap

    char *data = (char*)(native_ptr + string_size);
    for (int i = 0; i < size; i++) {
        *data = i + 'a';
        data++;
    }
    printf("Res = %x\n",res);
    return res;
}

int main() {
    std::string s = "hellddo";
    std::cout << s;
    
    initWasmEnv();
    wasm_function_inst_t printListString;
    wasm_function_inst_t printVector;
    wasm_function_inst_t printString;

    if (!(printListString = wasm_runtime_lookup_function(module_inst,"printListString",NULL))) {
        printf("The printListString wasm function is not found.\n");
        deleteWasmEnv();
    }
    // if (!(printPersonInfo = wasm_runtime_lookup_function(module_inst, "printPersonInfo",
    //                                           NULL))) {
    //     printf("The printPersonInfo wasm function is not found.\n");
    //     deleteWasmEnv();
    // }

    if (!(printString = wasm_runtime_lookup_function(module_inst,"printString",NULL))) {
        printf("The printString wasm function is not found.\n");
        deleteWasmEnv();
    }

    if (!(printVector = wasm_runtime_lookup_function(module_inst,"printVector",NULL))) {
        printf("The printVector wasm function is not found.\n");
        deleteWasmEnv();
    }

    // Person src = {17,"XiaoMing",1234568990};
    uint32_t argv1[1] = {res};
    uint32_t start = 0,end = 0;
    wasm_runtime_get_app_addr_range(module_inst,0,&start,&end);
    printf("start = %x,end = %x\n",start,end);
    uint8_t *native_start,*native_end;
    // wasm_runtime_get_native_addr_range(module_inst,P,&native_start,&native_end);
    printf("native_start = %x,native_end = %x\n",native_start,native_end);

    if (!wasm_runtime_call_wasm(exec_env, printString, 1, argv1)) {
        printf("call wasm function testData failed. error: %s\n",
            wasm_runtime_get_exception(module_inst));
        deleteWasmEnv();
    }
    return 0;
}