// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_testp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_testp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_testp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_testp_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_testp_2eproto;
class mData;
struct mDataDefaultTypeInternal;
extern mDataDefaultTypeInternal _mData_default_instance_;
class mData_MpEntry_DoNotUse;
struct mData_MpEntry_DoNotUseDefaultTypeInternal;
extern mData_MpEntry_DoNotUseDefaultTypeInternal _mData_MpEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::mData* Arena::CreateMaybeMessage<::mData>(Arena*);
template<> ::mData_MpEntry_DoNotUse* Arena::CreateMaybeMessage<::mData_MpEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class mData_MpEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<mData_MpEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<mData_MpEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  mData_MpEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR mData_MpEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit mData_MpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const mData_MpEntry_DoNotUse& other);
  static const mData_MpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const mData_MpEntry_DoNotUse*>(&_mData_MpEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_testp_2eproto;
};

// -------------------------------------------------------------------

class mData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mData) */ {
 public:
  inline mData() : mData(nullptr) {}
  ~mData() override;
  explicit PROTOBUF_CONSTEXPR mData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mData(const mData& from);
  mData(mData&& from) noexcept
    : mData() {
    *this = ::std::move(from);
  }

  inline mData& operator=(const mData& from) {
    CopyFrom(from);
    return *this;
  }
  inline mData& operator=(mData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mData& default_instance() {
    return *internal_default_instance();
  }
  static inline const mData* internal_default_instance() {
    return reinterpret_cast<const mData*>(
               &_mData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(mData& a, mData& b) {
    a.Swap(&b);
  }
  inline void Swap(mData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mData& from) {
    mData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mData";
  }
  protected:
  explicit mData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMpFieldNumber = 1,
  };
  // map<int32, int32> mp = 1;
  int mp_size() const;
  private:
  int _internal_mp_size() const;
  public:
  void clear_mp();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_mp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_mp();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      mp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_mp();

  // @@protoc_insertion_point(class_scope:mData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        mData_MpEntry_DoNotUse,
        int32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> mp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_testp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// mData

// map<int32, int32> mp = 1;
inline int mData::_internal_mp_size() const {
  return _impl_.mp_.size();
}
inline int mData::mp_size() const {
  return _internal_mp_size();
}
inline void mData::clear_mp() {
  _impl_.mp_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
mData::_internal_mp() const {
  return _impl_.mp_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
mData::mp() const {
  // @@protoc_insertion_point(field_map:mData.mp)
  return _internal_mp();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
mData::_internal_mutable_mp() {
  return _impl_.mp_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
mData::mutable_mp() {
  // @@protoc_insertion_point(field_mutable_map:mData.mp)
  return _internal_mutable_mp();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_testp_2eproto
